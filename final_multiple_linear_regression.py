# -*- coding: utf-8 -*-
"""Final multiple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j6uYNqH6Eluk7diPiful4vsNdwBpQ5W_

# Multiple Linear Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('/content/sample_dataset.csv')

filtered_rows = dataset[(dataset['GarageCars'] != 0) & (dataset['GarageArea'] == 0)]
print(filtered_rows)

mean_value = dataset[(dataset['GarageCars'] == 3) | (dataset['GarageCars'] == 2)]['GarageArea'].mean()
print(mean_value)
dataset.loc[filtered_rows.index, 'GarageArea'] = mean_value

print(dataset)

from sklearn.preprocessing import StandardScaler
def return2darray(list1):
  scaler = StandardScaler()
  return scaler.fit_transform([[x] for x in list1])

# dataset['GrLivArea'] = return2darray(dataset['GrLivArea'])
# dataset['YearBuilt'] = return2darray(dataset['YearBuilt'])
# dataset['TotalBsmtSF'] = return2darray(dataset['TotalBsmtSF'])
# dataset['GarageArea'] = return2darray(dataset['GarageArea'])
dataset['SalePrice'] = return2darray(dataset['SalePrice'])

X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values
# y = np.log(dataset.iloc[:, -1].values)

print(y[0:10])

target = dataset.SalePrice
plt.hist(target, color='blue')
plt.show()

# plt.scatter( y_t, dataset['ID'], color = 'b')
# plt.xlim(-500, 1000000)
# plt.xlabel('SalePrice')
# plt.ylabel('ID')
# plt.show()

plt.scatter( x = dataset['OverallQual'] , y = dataset['SalePrice'], color = 'b')
plt.xlabel('OverallQual')
plt.ylabel('SalePrice')
plt.show()

plt.scatter( x = dataset['GrLivArea'] , y = dataset['SalePrice'], color = 'b')
plt.xlabel('GrLivArea')
plt.ylabel('SalePrice')
plt.show()

plt.scatter( x = dataset['YearBuilt'], y = dataset['SalePrice'] , color = 'b')
# plt.xlim(-500, 5000)
plt.xlabel('YearBuilt')
plt.ylabel('SalePrice')
plt.show()

print(dataset['GarageArea'])

plt.scatter( x = dataset['GarageArea'] , y = dataset['SalePrice'], color = 'b')
# plt.xlim(-200, 1200)
plt.xlabel('GarageArea')
plt.ylabel('SalePrice')
plt.show()

numeric_features = dataset.select_dtypes(include=[np.number])
corr = numeric_features.corr()
print(corr['SalePrice'].sort_values(ascending=False))

# del dataset['HalfBath']
# del dataset['GarageCars']
# del dataset['YearBuilt']

# del dataset['OverallQual']
# del dataset['GrLivArea']
# del dataset['FullBath']
# del dataset['GarageArea']

print(dataset.head(10))

print(y[0:10])

# print(y_t)

print(X[0:10])

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

print(X_train)
print(y_train)

"""## Training the Multiple Linear Regression model on the Training set

---


"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = regressor.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

# print(np.exp(y_pred))

plt.scatter(y_pred, y_test, color = 'r')
plt.xlabel('Predected values')
plt.ylabel('Actual Values')
plt.show()

"""## Evaluating the Model Performance"""

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

